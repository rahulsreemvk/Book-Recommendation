class App:
    def __init__(self):
        pass
# Funciton to get user's choice of similarity function
    def sim_choice(self):
        
        smchoice = int(input('Select which method to use from given options:\n' +
                        '1. Type 1 to use Cosine similarity\n' +
                        '2. Type 2 to use Manhattan similarity\n' +
                        '3. Type 3 to use Eucledian similarity\n'))
        if smchoice == 1:
            method = 'cosine'
            print('Calculating.....')
        elif smchoice == 2:
            method = 'manhattan'
            print('Calculating.....')
        elif smchoice == 3:
            print('Calculating.....')
            method = 'euclidean'
        else:
            print('Enter a valid option\n')
        return method
# Returns user's choice of similarity method
    
    def run(self):

# Creating objects of class to fetch data, check similarity and suggest recommendations
        f = FetchData()
        data = f.GetData()
        s = Similarity()
        r = Recommendation()
# Creating an infinite loop to run the application till the user exits the application
        while True:
# Asking user to pick an option
            choice = int(input('Please select one from given options\n' +
                           '1. Type 1 to find similar books\n' +
                           '2. Type 2 to find similar users\n' +
                           '3. Type 3 to find book recommendations for a given user\n' +
                           '4. Type 4 to find similarity between 2 users\n' +
                           '5. Type 5 to find similarity between 2 books\n' +
                           '6. Type 6 to find similarity between a book and a user\n' +
                           '0. Type 0 to exit application\n\n'))
# Option to get similar books based on given ISBN
            if choice == 1:
                isbn = input('Enter ISBN to get similar books: ')
                mthd = self.sim_choice()
                book, user, rating = f.load_dataset()
                r.get_recommendation(book, user, rating, isbn, choice, mthd)
                continue

# Option to get similar User IDs based on a given User ID
            elif choice == 2:
                userid = int(input('Enter User ID to get similar users: '))
                mthd = self.sim_choice()
                book, user, rating = f.load_dataset()
                r.get_recommendation(book, user, rating, userid, choice, mthd)
                continue

# Option to get book recommendations based on a given User ID
            elif choice == 3:
                buserid = int(input('Enter User ID to find book recommendations: '))
                mthd = self.sim_choice()
                book, user, rating = f.load_dataset()
                r.get_recommendation(book, user, rating, buserid, choice, mthd)
                continue

# Option to check similarity between two users
            elif choice == 4:
                user1 = input("Enter ID of User1: ")
                user2 = input("Enter ID of User2: ")
                print("\n")
                output(s.get_similarity(data, user1, user2, choice))
                continue

# Option to check similarity between two books
            elif choice == 5:
                book1 = input("Enter the ISBN of Book1: ")
                book2 = input("Enter the ISBN of Book2: ")
                print("\n")
                output(s.get_similarity(data, book1, book2, choice))
                continue

# Option to check similarity between a user and a book
            elif choice == 6:
                user = input("Enter the User ID: ")
                book = input("Enter the ISBN of book:")
                print("\n")
                output(s.get_similarity(data, user, book, choice))
                continue

# Option to exit the application
            elif choice == 0:
                break

# If user enters an invalid option
            else:
                print("Please enter a valid option")     
                continue        

# Main Function

def main():
    app = App()
    app.run()
            
main()
